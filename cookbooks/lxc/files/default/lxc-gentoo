#!/bin/bash

# Detect use under userns (unsupported)
for arg in "$@"; do
    [ "$arg" = "--" ] && break
    if [ "$arg" = "--mapped-uid" -o "$arg" = "--mapped-gid" ]; then
        echo "This template can't be used for unprivileged containers." 1>&2
        echo "You may want to try the \"download\" template instead." 1>&2
        exit 1
    fi
done

# Make sure the usual locations are in PATH
export PATH=$PATH:/usr/sbin:/usr/bin:/sbin:/bin

set -e

LOCALSTATEDIR="/var"
LXC_TEMPLATE_CONFIG="/usr/share/lxc/config"

if [ -r /etc/default/lxc ]; then
    . /etc/default/lxc
fi

configure_gentoo()
{
    rootfs=$1
    name=$2

    echo > ${rootfs}/etc/fstab
    rm -f ${rootfs}/etc/mtab
    ln -s /proc/self/mounts ${rootfs}/etc/mtab

    echo "LANG=en_US.UTF-8" > "${rootfs}/etc/locale.conf"
    echo "KEYMAP=us" > "${rootfs}/etc/vconsole.conf"

    cat > "${rootfs}/etc/adjtime" << EOF
0.0 0.0 0.0
0
LOCAL
EOF

    echo "${fqdn/.*}" > "${rootfs}/etc/hostname"
    cat > "${rootfs}/etc/hosts" << EOF
127.0.0.1 localhost
::1 localhost
${ipaddress} ${fqdn} ${fqdn/.*}
EOF

    cat > "${rootfs}/etc/resolv.conf" << EOF
nameserver 8.8.8.8
nameserver 8.8.4.4
EOF

    return 0
}

cleanup()
{
    file=$(basename $image)
    dir=${file/.tar*}
    rm -rf $cache/$dir
    rm -rf $cache/$(basename $image)
}

download_gentoo()
{
    cache=$1
    image=$2

    trap cleanup EXIT SIGHUP SIGINT SIGTERM

    file=$(basename $image)
    dir=${file/.tar*}

    mkdir -p $cache
    wget --no-check-certificate -nv -O $cache/$file $image

    mkdir -p $cache/$dir
    tar --numeric-owner -xpf $cache/$file -C $cache/$dir

    trap EXIT
    trap SIGINT
    trap SIGTERM
    trap SIGHUP

    return 0
}

copy_gentoo()
{
    cache=$1
    dir=$2
    rootfs=$3

    echo "Copying rootfs to $rootfs..."
    mkdir -p $rootfs
    rsync -Ha --numeric-ids "$cache/$dir"/ $rootfs/ || return 1
    return 0
}

install_gentoo()
{
    rootfs=$1
    clean=$2

    cache="$LOCALSTATEDIR/cache/lxc/$release"
    mkdir -p $LOCALSTATEDIR/lock/subsys/

    file=$(basename $image)
    dir=${file/.tar*}

    (
        flock -x 9
        if [ $? -ne 0 ]; then
            echo "Cache repository is busy."
            return 1
        fi

        if [ $clean -eq 1 ]; then
            cleanup
        fi

        echo "Checking cache download in $cache/$dir ... "
        if [ ! -e "$cache/$dir" ]; then
            download_gentoo $cache $image
            if [ $? -ne 0 ]; then
                echo "Failed to download image"
                return 1
            fi
        fi

        copy_gentoo $cache $dir $rootfs
        if [ $? -ne 0 ]; then
            echo "Failed to copy rootfs"
            return 1
        fi

        return 0

    ) 9>$LOCALSTATEDIR/lock/subsys/lxc-gentoo

    return $?
}

copy_configuration()
{
    path=$1
    rootfs=$2
    name=$3

    # if there is exactly one veth network entry, make sure it has an
    # associated hwaddr.
    nics=`grep -e '^lxc\.network\.type[ \t]*=[ \t]*veth' $path/config | wc -l`
    if [ $nics -eq 1 ]; then
        grep -q "^lxc.network.hwaddr" $path/config || sed -i -e "/^lxc\.network\.type[ \t]*=[ \t]*veth/a lxc.network.hwaddr = 00:16:3e:$(openssl rand -hex 3| sed 's/\(..\)/\1:/g; s/.$//')" $path/config
    fi

    # Generate the configuration file
    ## Create the fstab (empty by default)
    touch $path/fstab

    ## Relocate all the network config entries
    sed -i -e "/lxc.network/{w ${path}/config-network" -e "d}" $path/config

    ## Relocate any other config entries
    sed -i -e "/lxc./{w ${path}/config-auto" -e "d}" $path/config

    ## Add all the includes
    echo "" >> $path/config
    echo "# Common configuration" >> $path/config
    if [ -e "${LXC_TEMPLATE_CONFIG}/gentoo.common.conf" ]; then
        echo "lxc.include = ${LXC_TEMPLATE_CONFIG}/gentoo.common.conf" >> $path/config
    fi

    ## Add the container-specific config
    echo "" >> $path/config
    echo "# Container specific configuration" >> $path/config
    [ -e "$path/config-auto" ] && cat $path/config-auto >> $path/config && rm $path/config-auto
    grep -q "^lxc.rootfs" $path/config 2>/dev/null || echo "lxc.rootfs = $rootfs" >> $path/config
    cat <<EOF >> $path/config
lxc.mount = $path/fstab
lxc.utsname = ${fqdn/.*}
EOF

    ## Re-add the previously removed network config
    echo "" >> $path/config
    echo "# Network configuration" >> $path/config
    cat $path/config-network >> $path/config
    rm $path/config-network

    ## add ip address
    echo "lxc.network.ipv4 = ${ipaddress}/32" >> $path/config

    if [ $? -ne 0 ]; then
        echo "Failed to add configuration"
        return 1
    fi

    return 0
}

post_process()
{
    rootfs=$1

    # Set initial timezone as on host
    if [ -f /etc/timezone ]; then
        cat /etc/timezone > $rootfs/etc/timezone
    elif [ -f /etc/sysconfig/clock ]; then
        . /etc/sysconfig/clock
        echo $ZONE > $rootfs/etc/timezone
    else
        echo "Timezone in container is not configured. Adjust it manually."
    fi

    # setup systemd
    rm -f ${rootfs}/etc/systemd/system/default.target
    ln -nfs /usr/lib/systemd/system/multi-user.target \
        ${rootfs}/etc/systemd/system/default.target

    echo "#!/bin/sh\nexec /usr/lib/systemd/systemd" >> ${rootfs}/sbin/init
    chmod +x ${rootfs}/sbin/init

    echo "root:tux" | chroot $rootfs chpasswd
    echo "Root password is 'tux', please change!"
}

usage()
{
    cat <<EOF
$1 -h|--help [-d|--debug] [-c|--clean] [-i|--ipaddress 1.2.3.4] [-f|--fqdn host.domain.tld]
   [--image <URL>]
image: gentoo stage3/4 tarball URL
EOF
    return 0
}

options=$(getopt -o hdci:f:p:n: -l help,debug,clean,ipaddress:,fqdn:,path:,name:,rootfs:,image: -- "$@")
if [ $? -ne 0 ]; then
    usage $(basename $0)
    exit 1
fi
eval set -- "$options"

clean=0
debug=0
ipaddress=169.254.169.254

MIRROR=${MIRROR:-http://mirror.zenops.net/zentoo}
ARCH=$(portageq envvar ARCH)
image=$MIRROR/$ARCH/zentoo-amd64-base.tar.bz2

while true
do
    case "$1" in
        -h|--help)      usage $0 && exit 0;;
        -d|--debug)     debug=1; shift 1;;
        -c|--clean)     clean=$2; shift 2;;
        -i|--ipaddress) ipaddress=$2; shift 2;;
        -f|--fqdn)      fqdn=$2; shift 2;;
        -p|--path)      path=$2; shift 2;;
        -n|--name)      name=$2; shift 2;;
        --rootfs)       rootfs=$2; shift 2;;
        --image)        image=$2; shift 2;;
        --)             shift 1; break ;;
        *)              break ;;
    esac
done

if [ $debug -eq 1 ]; then
    set -x
fi

if [ -z "$fqdn" ]; then
    fqdn=${name}.local
fi

if [ -z "$path" ]; then
    echo "'path' parameter is required"
    exit 1
fi

if [ "$(id -u)" != "0" ]; then
    echo "This script should be run as 'root'"
    exit 1
fi

# detect rootfs
config="$path/config"
# if $rootfs exists here, it was passed in with --rootfs
if [ -z "$rootfs" ]; then
    if grep -q '^lxc.rootfs' $config 2>/dev/null ; then
        rootfs=$(awk -F= '/^lxc.rootfs =/{ print $2 }' $config)
    else
        rootfs=$path/rootfs
    fi
fi

install_gentoo $rootfs $clean
if [ $? -ne 0 ]; then
    echo "failed to install gentoo"
    exit 1
fi

configure_gentoo $rootfs $name
if [ $? -ne 0 ]; then
    echo "failed to configure gentoo for a container"
    exit 1
fi

copy_configuration $path $rootfs $name
if [ $? -ne 0 ]; then
    echo "failed write configuration file"
    exit 1
fi

post_process $rootfs
