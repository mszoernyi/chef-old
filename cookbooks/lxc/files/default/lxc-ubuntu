#!/bin/bash

set -e

# defaults
MIRROR=${MIRROR:-http://archive.ubuntu.com/ubuntu}
SECURITY_MIRROR=${SECURITY_MIRROR:-http://security.ubuntu.com/ubuntu}

release=precise
arch=amd64
ipaddress=169.254.169.254
gateway=$(ip addr show dev lxc0 scope global | grep inet | awk '{print $2}' | awk -F/ '{print $1}')

configure_ubuntu()
{
    rootfs=$1
    name=$2
    release=$3

    echo > ${rootfs}/etc/fstab
    rm -f ${rootfs}/etc/mtab
    ln -s /proc/self/mounts ${rootfs}/etc/mtab

    chroot $rootfs locale-gen en_US.UTF-8
    chroot $rootfs update-locale LANG=en_US.UTF-8

    echo "${name}" > "${rootfs}/etc/hostname"
    cat > "${rootfs}/etc/hosts" << EOF
127.0.0.1 localhost
::1 localhost
${ipaddress} ${name}
EOF

    cat > "${rootfs}/etc/resolv.conf" << EOF
nameserver 8.8.8.8
nameserver 8.8.4.4
EOF

    cat <<EOF > $rootfs/etc/network/interfaces
auto lo
iface lo inet loopback

auto eth0
iface eth0 inet static
    address ${ipaddress}
    netmask 255.255.255.255
    gateway ${gateway}
    pointopoint ${gateway}
EOF

    echo "root:tux" | chroot $rootfs chpasswd
    echo "Root password is 'tux', please change!"

    return 0
}

cleanup()
{
    rm -rf $cache/partial-$arch
    rm -rf $cache/rootfs-$arch
}

suggest_flush()
{
    echo "Container upgrade failed.  The container cache may be out of date,"
    echo "in which case flushing the cache (see -c in the help output) may help."
}

download_ubuntu()
{
    cache=$1
    arch=$2
    release=$3

    trap cleanup EXIT SIGHUP SIGINT SIGTERM

    mkdir -p "$cache/partial-$arch"
    debootstrap --verbose \
        --components=main,universe \
        --arch=$arch \
        --include=vim,ssh,git \
        $release \
        $cache/partial-$arch \
        $MIRROR

    cat > "${cache}/partial-${arch}/etc/apt/sources.list" << EOF
deb $MIRROR ${release} main restricted universe multiverse
deb $MIRROR ${release}-updates main restricted universe multiverse
deb $SECURITY_MIRROR ${release}-security main restricted universe multiverse
EOF

    chroot "${cache}/partial-${arch}" apt-get update

    cat > "${cache}/partial-${arch}"/usr/sbin/policy-rc.d << EOF
#!/bin/sh
exit 101
EOF
    chmod +x "${cache}/partial-${arch}"/usr/sbin/policy-rc.d

    lxc-unshare -s MOUNT -- chroot "${cache}/partial-${arch}" apt-get dist-upgrade -y || { suggest_flush; false; }
    rm -f "${cache}/partial-${arch}"/usr/sbin/policy-rc.d
    chroot "${cache}/partial-${arch}" apt-get clean
    mv "${cache}/partial-$arch" "${cache}/rootfs-$arch"

    trap EXIT
    trap SIGINT
    trap SIGTERM
    trap SIGHUP

    return 0
}

copy_ubuntu()
{
    cache=$1
    arch=$2
    rootfs=$3

    # make a local copy of the miniubuntu
    echo "Copying rootfs to $rootfs ..."
    mkdir -p $rootfs
    rsync -Ha --numeric-ids $cache/rootfs-$arch/ $rootfs/ || return 1
    return 0
}

install_ubuntu()
{
    rootfs=$1
    release=$2
    clean=$3
    cache="/var/cache/lxc/$release"
    mkdir -p /var/lock/subsys/

    (
        flock -x 200
        if [ $? -ne 0 ]; then
            echo "Cache repository is busy."
            return 1
        fi

        if [ $clean -eq 1 ]; then
            echo "Flushing cache..."
            rm -rf "$cache/partial-$arch"
            rm -rf "$cache/rootfs-$arch"
        fi

        echo "Checking cache download in $cache/rootfs-$arch ... "
        if [ ! -e "$cache/rootfs-$arch" ]; then
            download_ubuntu $cache $arch $release
            if [ $? -ne 0 ]; then
                echo "Failed to download 'ubuntu $release base'"
                return 1
            fi
        fi

        echo "Copy $cache/rootfs-$arch to $rootfs ... "
        copy_ubuntu $cache $arch $rootfs
        if [ $? -ne 0 ]; then
            echo "Failed to copy rootfs"
            return 1
        fi

        return 0

    ) 200>/var/lock/subsys/lxc-ubuntu

    return $?
}

copy_configuration()
{
    path=$1
    rootfs=$2
    name=$3
    arch=$4
    release=$5

    grep -q "^lxc.rootfs" $path/config 2>/dev/null || echo "lxc.rootfs = $rootfs" >> $path/config

    cat <<EOF >> $path/config
lxc.utsname = ${name}

lxc.network.type = veth
lxc.network.veth.pair = veth-${name}
lxc.network.flags = up
lxc.network.link = lxc0
lxc.network.name = eth0

# mounts that allow us to drop CAP_SYS_ADMIN
lxc.autodev = 1
lxc.mount.entry=sys ${rootfs}/sys sysfs ro,defaults 0 0
lxc.mount.entry=proc ${rootfs}/proc proc nodev,noexec,nosuid 0 0

# console access
lxc.tty = 1
lxc.pts = 128

# drop unnecessary capabilities
lxc.cap.drop = audit_control
lxc.cap.drop = audit_write
lxc.cap.drop = dac_read_search
lxc.cap.drop = ipc_owner
lxc.cap.drop = linux_immutable
lxc.cap.drop = mac_admin
lxc.cap.drop = mac_override
lxc.cap.drop = mknod
lxc.cap.drop = sys_boot
lxc.cap.drop = sys_module
lxc.cap.drop = sys_rawio
lxc.cap.drop = sys_time
lxc.cap.drop = sys_tty_config
lxc.cap.drop = syslog

# deny access to all devices by default, explicitly grant some permissions
lxc.cgroup.devices.deny = a
# /dev/null and zero
lxc.cgroup.devices.allow = c 1:3 rw
lxc.cgroup.devices.allow = c 1:5 rw
# /dev/{,u}random
lxc.cgroup.devices.allow = c 1:8 r
lxc.cgroup.devices.allow = c 1:9 rw
# /dev/tty{0,1}
lxc.cgroup.devices.allow = c 4:0 rwm
lxc.cgroup.devices.allow = c 4:1 rwm
# /dev/tty
lxc.cgroup.devices.allow = c 5:0 rwm
# /dev/console
lxc.cgroup.devices.allow = c 5:1 rwm
# /dev/pts/*
lxc.cgroup.devices.allow = c 5:2 rw
lxc.cgroup.devices.allow = c 136:* rw
# rtc
lxc.cgroup.devices.allow = c 254:0 rwm
EOF

    echo "INIT_COMMAND=/sbin/init" > $path/env

    return 0
}

usage()
{
    cat <<EOF
$1 -h|--help [-d|--debug] [-c|--clean] [-i|--ipaddress 1.2.3.4] [-g|--gateway 1.2.3.4] [-r|--release <release>] [-a|--arch <arch>]
EOF
    return 0
}

options=$(getopt -o hp:n:cdi:g:r:a: -l help,path:,name:,clean,debug,ipaddress:,gateway:,release:,arch: -- "$@")
if [ $? -ne 0 ]; then
    usage $(basename $0)
    exit 1
fi
eval set -- "$options"

clean=0
debug=0

while true
do
    case "$1" in
        -h|--help)      usage $0 && exit 0;;
        -p|--path)      path=$2; shift 2;;
        -n|--name)      name=$2; shift 2;;
        -c|--clean)     clean=$2; shift 2;;
        -d|--debug)     debug=1; shift 1;;
        -i|--ipaddress) ipaddress=$2; shift 2;;
        -g|--gateway)   gateway=$2; shift 2;;
        -r|--release)   release=$2; shift 2;;
        -a|--arch)      arch=$2; shift 2;;
        --)             shift 1; break ;;
        *)              break ;;
    esac
done

if [ $debug -eq 1 ]; then
    set -x
fi

if [ -z "$path" ]; then
    echo "'path' parameter is required"
    exit 1
fi

if [ "$(id -u)" != "0" ]; then
    echo "This script should be run as 'root'"
    exit 1
fi

if [ "$arch" == "i686" ]; then
    arch=i386
fi

which debootstrap >/dev/null 2>&1 || { echo "'debootstrap' command is missing" >&2; false; }

# detect rootfs
config="$path/config"
if grep -q '^lxc.rootfs' $config 2>/dev/null ; then
    rootfs=`grep 'lxc.rootfs =' $config | awk -F= '{ print $2 }'`
else
    rootfs=$path/rootfs
fi

install_ubuntu $rootfs $release $clean
if [ $? -ne 0 ]; then
    echo "failed to install ubuntu $release"
    exit 1
fi

configure_ubuntu $rootfs $name $release
if [ $? -ne 0 ]; then
    echo "failed to configure ubuntu $release for a container"
    exit 1
fi

copy_configuration $path $rootfs $name $arch $release
if [ $? -ne 0 ]; then
    echo "failed write configuration file"
    exit 1
fi
