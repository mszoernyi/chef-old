#!/usr/bin/perl -w
####################### check_apachestatus_auto.pl #######################
# Version: 1.2
# Date: 14 Jul 2009
# Author: Dennis D. Spreen (dennis at spreendigital.de)
#         Based on check_apachestatus.pl v1.4 by
#             De Bodt Lieven (Lieven dot DeBodt at gmail.com)
#         Updated by
#             Karsten Behrens (karsten at behrens dot in)
#             Geoff McQueen (geoff dot mcqueen at hiivesystems dot com )
#             Dave Steinberg (dave at redterror dot net)
#             Gerhard Lausser (gerhard dot lausser at consol dot de)
#             Benedikt BÃ¶hm <bb@xnull.de>
# Licence : GPL - http://www.fsf.org/licenses/gpl.txt
##########################################################################

use strict;
use Getopt::Long;
use LWP::UserAgent;
use Time::HiRes qw(gettimeofday tv_interval);
use Digest::MD5 qw(md5 md5_hex);

# Nagios specific
use lib "/usr/lib/nagios/plugins";
use utils qw(%ERRORS $TIMEOUT);

# Globals
my $Version='1.2';
my $Name=$0;

my $o_host = undef;
my $o_help = undef;
my $o_port =  undef;
my $o_url = '';
my $o_user = undef;
my $o_pass = '';
my $o_realm = '';
my $o_version = undef;
my $o_warn_level = undef;
my $o_crit_level = undef;
my $o_timeout = 15;
my $o_proxy = undef;

my $TempPath = '/tmp/';
my $MaxUptimeDif = 60*30;

# functions
sub show_versioninfo {
	print "$Name version : $Version\n";
}

sub print_usage {
	print "Usage: $Name -H <host> [-p <port>] [-t <timeout>] [-w <warn_level> -c <crit_level>] [-V] [-u <url>] [-U user -P pass -r realm]\n";
}

# Get the alarm signal
$SIG{'ALRM'} = sub {
	print ("ERROR: Alarm signal (Nagios time-out)\n");
	exit $ERRORS{"CRITICAL"};
};

sub help {
	print "Apache Monitor for Nagios version ",$Version,"\n";
	print "GPL licence, (c)2009 Dennis D. Spreen\n\n";
	print_usage();
	print <<EOT;
-h, --help
   print this help message
-H, --hostname=HOST
   name or IP address of host to check
-p, --port=PORT
   Http port
-u, --url=URL
   Specific URL to use, instead of the default http://hostname/server-status
-U, --user=user
   Username for basic auth
-P, --pass=PASS
   Password for basic auth
-r, --realm=REALM
   Realm for basic auth
-X, --proxy=PROXY
   Proxy-URL for http and https (mandatory)
-t, --timeout=INTEGER
   timeout in seconds (Default: $o_timeout)
-w, --warn=MIN
   number of available slots that will cause a warning
   -1 for no warning
-c, --critical=MIN
   number of available slots that will cause an error
-V, --version
   prints version number
Note :
  The script will return
    * Without warn and critical options:
        OK       if we are able to connect to the apache server's status page,
        CRITICAL if we aren't able to connect to the apache server's status page,,
    * With warn and critical options:
        OK       if we are able to connect to the apache server's status page and #available slots > <warn_level>,
        WARNING  if we are able to connect to the apache server's status page and #available slots <= <warn_level>,
        CRITICAL if we are able to connect to the apache server's status page and #available slots <= <crit_level>,
        UNKNOWN  if we aren't able to connect to the apache server's status page

EOT
}

sub check_options {
	Getopt::Long::Configure ("bundling");
	GetOptions(
		'h'   => \$o_help,       'help'       => \$o_help,
		'H:s' => \$o_host,       'hostname:s' => \$o_host,
		'u:s' => \$o_url,        'url:s'      => \$o_url,
		'U:s' => \$o_user,       'user:s'     => \$o_user,
		'P:s' => \$o_pass,       'pass:s'     => \$o_pass,
		'r:s' => \$o_realm,      'realm:s'    => \$o_realm,
		'p:i' => \$o_port,       'port:i'     => \$o_port,
		'V'   => \$o_version,    'version'    => \$o_version,
		'w:i' => \$o_warn_level, 'warn:i'     => \$o_warn_level,
		'c:i' => \$o_crit_level, 'critical:i' => \$o_crit_level,
		't:i' => \$o_timeout,    'timeout:i'  => \$o_timeout,
		'X:s' => \$o_proxy,      'proxy:s'    => \$o_proxy,
	);

	if (defined ($o_help)) {
		help();
		exit $ERRORS{"UNKNOWN"}
	}

	if (defined($o_version)) {
		show_versioninfo();
		exit $ERRORS{"UNKNOWN"}
	}

	if (((defined($o_warn_level) && !defined($o_crit_level)) || (!defined($o_warn_level) && defined($o_crit_level))) || ((defined($o_warn_level) && defined($o_crit_level)) && (($o_warn_level != -1) &&  ($o_warn_level <= $o_crit_level)))) {
		print "Check warn and crit!\n";
		print_usage();
		exit $ERRORS{"UNKNOWN"}
	}

	# Check compulsory attributes
	if (!defined($o_host)) {
		print_usage();
		exit $ERRORS{"UNKNOWN"}
	};
}

check_options();

my $ua = LWP::UserAgent->new( protocols_allowed => ['http', 'https'], timeout => $o_timeout);
my $response = undef;
my $url = undef;

$ua->default_header('Accept' => "text/plain");

if (($o_url =~ m/^http(s?)\:\/\//i)) {
	$url = $o_url;
} else {
	if (!defined($o_port)) {
		$url = 'http://' . $o_host . $o_url.'/server-status?auto';
	} else {
		$url = 'http://' . $o_host . ':' . $o_port . $o_url.'/server-status?auto';
	}
}

my $req = HTTP::Request->new(GET => $url);
if (defined($o_user)) {
	$req->authorization_basic($o_user, $o_pass);
}

if (defined($o_proxy)) {
	if ($url =~ /^https/) {
		if ($o_proxy =~ /^http:\/\/(.*?)\/?$/) {
			$o_proxy = $1;
		}
		$ENV{HTTPS_PROXY} = $o_proxy;
	} else {
		$ua->proxy(['http'], $o_proxy);
	}
}

my $timing0 = [gettimeofday];
$response = $ua->request($req);
my $timeelapsed = tv_interval($timing0, [gettimeofday]);

my $webcontent = undef;
if ($response->is_success) {
	$webcontent=$response->content;

	my $Uptime = 0;
	if ($webcontent =~ m/Uptime: (.*?)\n/) {
		$Uptime = $1;
	}

	my $TotalAccesses = 0;
	if ($webcontent =~ m/Total Accesses: (.*?)\n/) {
		$TotalAccesses = $1;
	}

	my $TotalKbytes = 0;
	if ($webcontent =~ m/Total kBytes: (.*?)\n/) {
		$TotalKbytes = $1;
	}

	my $ScoreBoard = '';
	if ($webcontent =~ m/Scoreboard: (.*?)\n/) {
		$ScoreBoard = $1;
	}

	my $BusyWorkers= 0;
	if ($webcontent =~ m/BusyWorkers: (.*?)\n/) {
		$BusyWorkers = $1;
	}

	my $IdleWorkers=0;
	if ($webcontent =~ m/IdleWorkers: (.*?)\n/) {
		$IdleWorkers = $1;
	}

	my $TempFile = $TempPath.$o_host.'_check_apache2'.md5_hex($url);
	my $FH;

	my $LastUptime = 0;
	my $LastTotalAccesses = 0;
	my $LastTotalKbytes = 0;

	if ((-e $TempFile) && (-r $TempFile) && (-w $TempFile)) {
		open ($FH, '<',$TempFile) or exit $ERRORS{"CRITICAL"};
		$LastUptime = <$FH>;
		$LastTotalAccesses = <$FH>;
		$LastTotalKbytes = <$FH>;
		close ($FH);
	}

	open ($FH, '>'.$TempFile) or exit $ERRORS{"CRITICAL"};
	print $FH "$Uptime\n"; 
	print $FH "$TotalAccesses\n"; 
	print $FH "$TotalKbytes\n";
	close ($FH);

	my $ReqPerSec = 0;
	my $BytesPerReq = 0;
	my $BytesPerSec = 0;
	my $Accesses = 0;

	if (($Uptime>$LastUptime) && ($Uptime-$LastUptime<$MaxUptimeDif) && ($TotalAccesses>=$LastTotalAccesses) && ($TotalKbytes>=$LastTotalKbytes)) {
		$ReqPerSec = ($TotalAccesses-$LastTotalAccesses)/($Uptime-$LastUptime);
		$BytesPerSec = (($TotalKbytes-$LastTotalKbytes)*1024)/($Uptime-$LastUptime);
		$Accesses = ($TotalAccesses-$LastTotalAccesses);

		if ($TotalAccesses>$LastTotalAccesses) {
			$BytesPerReq = (($TotalKbytes-$LastTotalKbytes)*1024)/($TotalAccesses-$LastTotalAccesses);
		}
	}

	my $CountOpenSlots = ($ScoreBoard =~ tr/\.//);
	my $TotalSlots = $CountOpenSlots+$IdleWorkers+$BusyWorkers;
	my $InfoData = '';
	my $PerfData = '';

	$InfoData = sprintf("- %.3f sec. response time, Busy/Idle %d/%d, open %d/%d, ReqPerSec %.1f, BytesPerReq %d, BytesPerSec %d",
		$timeelapsed, $BusyWorkers, $IdleWorkers, $CountOpenSlots, $TotalSlots, $ReqPerSec, $BytesPerReq, $BytesPerSec);

	$PerfData = sprintf("Idle=%d Busy=%d OpenSlots=%d Slots=%d Starting=%d Reading=%d Sending=%d Keepalive=%d DNS=%d Closing=%d Logging=%d Finishing=%d ReqPerSec=%f BytesPerReq=%d BytesPerSec=%f Accesses=%d",
		$IdleWorkers, $BusyWorkers, $CountOpenSlots, $TotalSlots, $ScoreBoard =~ tr/S//, $ScoreBoard =~ tr/R//, $ScoreBoard =~ tr/W//, $ScoreBoard =~ tr/K//, $ScoreBoard =~ tr/D//,
		$ScoreBoard =~ tr/C//, $ScoreBoard =~ tr/L//, $ScoreBoard =~ tr/G//, $ReqPerSec, $BytesPerReq,$BytesPerSec,$Accesses);

	if (defined($o_crit_level) && ($o_crit_level != -1)) {
		if (($CountOpenSlots + $IdleWorkers) <= $o_crit_level) {
			print("APACHE CRITICAL ".$InfoData.'|'.$PerfData);
			exit $ERRORS{"CRITICAL"}
		}
	}

	if (defined($o_warn_level) && ($o_warn_level != -1)) {
		if (($CountOpenSlots + $IdleWorkers) <= $o_warn_level) {
			print("APACHE WARNING ".$InfoData.'|'.$PerfData);
			exit $ERRORS{"WARNING"}
		}
	}

	print("APACHE OK ".$InfoData.'|'.$PerfData);
	exit $ERRORS{"OK"}
} else {
	if (defined($o_warn_level) || defined($o_crit_level)) {
		printf("UNKNOWN %s\n", $response->status_line);
		exit $ERRORS{"UNKNOWN"}
	} else {
		printf("CRITICAL %s\n", $response->status_line);
		exit $ERRORS{"CRITICAL"}
	}
}
