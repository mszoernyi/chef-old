#!/bin/bash

set -e

depclean() {
	if [[ -z $UPDATEWORLD_DONT_ASK ]]; then
		emerge --depclean -aq
	else
		emerge --depclean -q
	fi
}

latest_ruby() {
	if eselect ruby list | grep -q ruby19; then
		if ! eselect ruby show | grep -q ruby19; then
			eselect ruby set ruby19
		fi
	fi
}

is_chef() {
	[[ -e /etc/chef/client.pem || -e /root/chef/Rakefile ]]
}

run_chef() {
	if [[ -e /etc/chef/client.pem ]]; then
		chef-client
	elif [[ -e /root/chef/bin/chef ]]; then
		pushd /root/chef >/dev/null
		./bin/chef
		popd >/dev/null
	fi
}

# force unicode locale
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8

# rubygems upgrade will remove auto_gem
unset RUBYOPT

# display news items and mark them as read.
eselect news read new &>/dev/null || :

# switch to latest ruby first
latest_ruby

# initial chef-client run
if is_chef && [[ -z $UPDATEWORLD_INITIAL_CHEF ]]; then
	rm /etc/portage/package.*/chef-* || :
	run_chef
	echo
	export UPDATEWORLD_INITIAL_CHEF=1
	exec $0 $*
fi

# dummy run emerge first, so global updates don't clutter the output.
emerge --info &>/dev/null

# install updates
if [[ -z $UPDATEWORLD_DONT_ASK ]]; then
	emerge @world -NDua
else
	emerge @world -NDu
fi

# force latest gcc version
latest_gcc=$(gcc-config -l|tail -n1|awk '{print $2}')
current_gcc=$(gcc-config -c)

if [[ $current_gcc != $latest_gcc ]]; then
	gcc-config ${latest_gcc}
fi

# force latest binutils
latest_binutils=$(binutils-config -l|tail -n1|awk '{print $2}')
current_binutils=$(binutils-config -c)

if [[ $current_binutils != $latest_binutils ]]; then
	binutils-config ${latest_binutils}
fi

# run chef to fixup stuff that portage broke
run_chef

# some packages may fail due to gcc/binutils update, so try this again
if [[ -z $UPDATEWORLD_DONT_ASK ]]; then
	emerge @world -NDua
else
	emerge @world -NDu
fi

# run chef to fixup stuff that portage broke
run_chef

# cleanup unneeded dependencies
depclean

# first try to resolve preserved-libs with binpkgs. if this fails, the second
# run will pick up remaining libs.
emerge @preserved-rebuild --quiet || :
emerge @preserved-rebuild --quiet --usepkg=n --getbinpkg=n || :

# this fucker needs to be run after every upgrade, since noone can be sure what
# has been broken. dude, srsly - can't we simply have PYTHON_TARGETS?
eselect python update --python2

if [[ $(ls -1d /usr/lib/python* | wc -l) != 1 ]]; then
	python-updater -dmanual -- --quiet --usepkg --getbinpkg
	python-updater -dmanual -- --quiet --usepkg=n --getbinpkg=n
fi

# same crap as with python ... except that perl-cleaner is even crappier
current_perl=$(ls -1d /usr/lib/perl5/5.* | sort --version-sort --reverse | head -n1 | xargs -n1 basename)
old_perl_dirs=$(ls -1d /usr/lib/perl5/5.* /usr/lib/perl5/site_perl/5.* /usr/lib/perl5/vendor_perl/5.* | grep -v ${current_perl} || :)

if [[ -n ${old_perl_dirs} ]]; then
	perl-cleaner --all -- --quiet --usepkg --getbinpkg
	perl-cleaner --all -- --quiet --usepkg=n --getbinpkg=n

	# perl-cleaner doesn't remove this crap
	for i in ${old_perl_dirs}; do
		rm -vf ${i}/x86_64-linux/Encode/ConfigLocal.pm
		rmdir -vp ${i}/x86_64-linux/Encode || :
	done
fi

# cleanup unneeded dependencies
depclean

# finally, after all this crap, run revdep-rebuild to pick up remaining
# packages that have broken lib dependencies.
EMERGE_DEFAULT_OPTS="" revdep-rebuild -q -i -- --quiet --quiet-build --with-bdeps=y --binpkg-respect-use=y --usepkg=n --getbinpkg=n

# switch to latest ruby before final depclean
latest_ruby

# cleanup unneeded dependencies
depclean

# systemd/udev upgrade
if [[ -d /usr/lib/udev ]]; then
	if qfile -q -S -C /usr/lib/udev >/dev/null; then
		emerge $(qfile -q -S -C /usr/lib/udev) -1 --usepkg --getbinpkg
	fi

	if qfile -q -S -C /usr/lib/udev >/dev/null; then
		emerge $(qfile -q -S -C /usr/lib/udev) -1 --usepkg=n --getbinpkg=n
	fi
fi

# update bootloader if kernel image is available
if [[ $(qlist -IC sys-kernel/zentoo-image) == "sys-kernel/zentoo-image" ]]; then
	emerge --config zentoo-image
fi

# update config files and run chef
if is_chef; then
	yes | etc-update --automode -5
	run_chef
else
	etc-update
fi

exit 0
