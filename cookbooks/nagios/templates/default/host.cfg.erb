###############################################################################
# HOST.CFG - OBJECTS FOR HOST <%= @host[:fqdn] %> (<%= @host.chef_environment %>)
###############################################################################

define host {
  use generic-host
  address <%= @host[:ipaddress] %>
  host_name <%= @host[:fqdn] %>
<% if @host[:virtualization][:host] %>
  parents <%= @host[:virtualization][:host] %>
<% end %>
  contact_groups on-call
<% if @host[:platform] %>
  check_command check_host_alive
<% else %>
  check_command check_host_none
<% end %>
}

<%
@host.default[:nagios] ||= {}
@host.default[:nagios][:services] ||= {}
@host[:nagios][:services].sort.each do |service_description, params|
  params = Hash[params].symbolize_keys!
  params[:enabled] = true if params[:enabled] == nil

  next unless params.delete(:enabled)
  next unless params[:host_name] == @host[:fqdn]

  envs = params.delete(:env) || []
  envs |= ['production']
%>

# <%= service_description %> (<%= envs.join(", ") %>)
<%
  next unless envs.include?(@host.chef_environment)

  params[:contact_groups] ||= "on-call"

  dependencies = params.delete(:dependencies)
  dependencies ||= []

  # legacy
  params.delete(:escalations)
%>
define service {
  use generic-service
<% params.sort.each do |key, value| %>
  <%= key %> <%= value %>
<% end %>
}
<% dependencies.sort.each do |dep| %>

define servicedependency {
  use generic-servicedependency
  host_name <%= params[:host_name] %>
  service_description <%= dep %>
  dependent_host_name <%= params[:host_name] %>
  dependent_service_description <%= service_description %>
}
<% end %>
<% end %>
