# Server Module
druid.host=<%= node[:fqdn] %>:<%= node[:druid][@service][:port] %>
druid.port=<%= node[:druid][@service][:port] %>
druid.service=<%= @service %>

<% case @service %>
<% when "coordinator" %>
# Coordinator Config
druid.coordinator.period=PT60S
druid.coordinator.period.indexingPeriod=PT1800S
druid.coordinator.startDelay=PT300S
druid.coordinator.merge.on=false
druid.coordinator.conversion.on=false
druid.coordinator.load.timeout=PT15M
druid.manager.config.pollDuration=PT1M
druid.manager.segment.pollDuration=PT1M
druid.manager.rules.pollDuration=PT1M
druid.manager.rules.defaultTier=_default

<% when "broker" %>
# Broker Config
druid.broker.balancer.type=<%= node[:druid][:broker][:balancer] %>
druid.broker.select.tier=highestPriority
druid.broker.http.numConnections=<%= node[:druid][:broker][:connections] %>
druid.broker.http.readTimeout=<%= node[:druid][:broker][:timeout] %>
druid.query.chunkPeriod=P1M

<% when "historical" %>
# Historical Config
druid.monitoring.monitors=["com.metamx.metrics.JvmMonitor","io.druid.client.cache.CacheMonitor","io.druid.server.metrics.HistoricalMetricsMonitor"]
druid.server.tier=<%= node[:druid][:server][:tier] %>
druid.server.priority=<%= node[:druid][:server][:priority] %>
druid.server.maxSize=<%= node[:druid][:server][:max_size] %>
druid.segmentCache.locations=[{"path": "/var/app/druid/storage/segment_cache", "maxSize": <%= node[:druid][:server][:max_size] %> }]
druid.segmentCache.deleteOnRemove=true
druid.segmentCache.infoDir=/var/app/druid/storage/info
druid.segmentCache.numLoadingThreads=4
druid.historical.cache.useCache=true
druid.historical.cache.populateCache=true
druid.historical.cache.unCacheable=["select"]

# Cache
<% if memcached_nodes.any? %>
druid.cache.type=hybrid
druid.cache.l1.type=local
druid.cache.l1.sizeInBytes=17179869184
druid.cache.l2.type=memcached
druid.cache.l2.hosts=<%= memcached_nodes.map { |n| "#{n[:ipaddress]}:11211" }.join(",") %>
druid.cache.l2.maxObjectSize=1048576
druid.cache.l2.timeout=1000
druid.cache.l2.numConnections=<%= node[:cpu][:total] %>
<% end %>

<% when "realtime" %>
# Realtime Config
druid.monitoring.monitors=["com.metamx.metrics.JvmMonitor","io.druid.segment.realtime.RealtimeMetricsMonitor"]
druid.server.tier=realtime
druid.publish.type=metadata
druid.realtime.specFile=/var/app/druid/config/realtime/realtime.spec
druid.segmentCache.locations=[{"path": "/var/app/druid/storage/segment_cache", "maxSize": <%= node[:druid][:server][:max_size] %> }]

<% when "overlord" %>
# Overlord Config
druid.indexer.logs.type=hdfs
druid.indexer.logs.directory=/tmp/logs/druid/tasks
druid.indexer.runner.type=remote
druid.indexer.runner.compressZnodes=true
druid.indexer.storage.type=metadata

<% when "middleManager" %>
# MiddleManager Config
druid.worker.ip=<%= node[:ipaddress] %>
druid.worker.capacity=<%= node[:druid][:worker][:capacity] %>
druid.indexer.logs.type=hdfs
druid.indexer.logs.directory=/tmp/logs/druid/tasks
druid.indexer.runner.type=remote
druid.indexer.runner.compressZnodes=true
druid.indexer.runner.javaOpts=<%= node[:druid][:indexer][:runner][:javaOpts] %>
druid.indexer.runner.startPort=<%= node[:druid][:indexer][:runner][:startPort] %>
druid.indexer.storage.type=metadata
druid.indexer.task.baseTaskDir=/var/app/druid/storage/task/
druid.indexer.fork.property.druid.monitoring.monitors=["com.metamx.metrics.JvmMonitor"]
druid.indexer.fork.property.druid.processing.buffer.sizeBytes=<%= node[:druid][:processing][:buffer] %>
druid.indexer.fork.property.druid.processing.numThreads=2
druid.indexer.fork.property.druid.segmentCache.locations=[{"path": "/var/app/druid/storage/segment_cache", "maxSize": 0}]
druid.indexer.fork.property.druid.server.http.numThreads=50
druid.indexer.fork.property.druid.storage.type=<%= node[:druid][:storage][:type] %>
druid.indexer.fork.property.druid.storage.storageDirectory=<%= node[:druid][:storage][:directory] %>
druid.indexer.fork.property.druid.indexer.hadoopWorkingPath=/var/app/druid/storage/task_hadoop
<% end %>
