<% @druid_version = %x{cd /var/app/druid/current && /usr/bin/mvn org.apache.maven.plugins:maven-help-plugin:2.1.1:evaluate -Dexpression=project.version | grep -v '\\[' |grep -v Download}.strip %>
# Modules
druid.extensions.coordinates=<%= (node[:druid][:core_extensions].map{|ext| "io.druid.extensions:druid-#{ext}:#{@druid_version}"} + node[:druid][:extensions]).to_json %>

# Emitter Module
druid.emitter=logging
<% if node[:druid][:logger] %>
druid.emitter.logging.logLevel=info
<% else %>
druid.emitter.logging.logLevel=debug
<% end %>
druid.monitoring.monitors=<%= node[:druid][:monitors].to_json %>

# Http Client Module
druid.broker.http.numConnections=<%= node[:druid][:broker][:connections] %>
druid.broker.http.readTimeout=<%= node[:druid][:broker][:timeout] %>
druid.broker.balancer.type=<%= node[:druid][:broker][:balancer] %>

# for now, we only support broker local caching
druid.broker.cache.sizeInBytes=<%= node[:druid][:broker][:cache_size_in_bytes] %>

# Curator Module / Discovery Module
druid.zk.service.host=<%= zookeeper_connect(node[:druid][:zookeeper][:root], node[:druid][:cluster]) %>
druid.zk.service.sessionTimeoutMs=<%= node[:druid][:zookeeper][:timeout] %>
druid.curator.compress=true
druid.discovery.curator.path=<%= node[:druid][:zookeeper][:discovery] %>

# Announcer Module / Server Inventory View Module
druid.announcer.type=batch
druid.announcer.segmentsPerNode=50
druid.announcer.maxBytesPerNode=524288

# Druid Processing Module
druid.processing.buffer.sizeBytes=<%= node[:druid][:processing][:buffer] %>
druid.processing.numThreads=<%= node[:druid][:processing][:numThreads] %>

# AWS Module
druid.s3.accessKey=<%= node[:druid][:storage][:s3][:access_key] %>
druid.s3.secretKey=<%= node[:druid][:storage][:s3][:secret_key] %>

# Server Module
druid.service=<%= node[:druid][:service] %>

# Storage Node Module
druid.server.maxSize=<%= node[:druid][:server][:max_size] %>
druid.server.tier=<%= node[:druid][:server][:tier] %>
druid.server.priority=<%= node[:druid][:server][:priority] %>

<% if node[:druid][:server][:max_size] > 0 %>
druid.segmentCache.locations=[{"path": "/var/app/druid/storage/segment_cache", "maxSize": <%= node[:druid][:server][:max_size] %> }]
<% end %>
druid.segmentCache.deleteOnRemove=true
druid.segmentCache.infoDir=/var/app/druid/storage/info

# Jetty Server Module
druid.server.http.numThreads=100

# Queryable Module
#druid.request.logging.type=emitter
#druid.request.logging.feed=metrics

# Query Runner Factory Module
druid.query.chunkPeriod=P2M

druid.query.groupBy.singleThreaded=false
druid.query.groupBy.maxIntermediateRows=1000000
druid.query.groupBy.maxResults=1000000

druid.query.search.maxSearchLimit=1000

# Database Connector Module
druid.db.connector.connectURI=<%= node[:druid][:database][:uri] %>
druid.db.connector.user=<%= node[:druid][:database][:user] %>
druid.db.connector.password=<%= node[:druid][:database][:password] %>

# DataSegment Pusher/Puller Module
# Choices: noop, s3, hdfs
druid.storage.type=<%= node[:druid][:storage][:type] %>
# S3 Deep Storage
druid.storage.bucket=<%= node[:druid][:storage][:s3][:bucket] %>
druid.storage.basekey=<%= node[:druid][:storage][:s3][:base_key] %>
# HDFS Deep Storage
druid.storage.storageDirectory=<%= node[:druid][:storage][:hdfs] %>

# Indexing Services
druid.indexer.runner.type=remote
druid.indexer.storage.type=local

druid.indexer.runner.compressZnodes=true
druid.indexer.runner.javaOpts=<%= node[:druid][:indexer][:runner][:javaOpts] %>
druid.indexer.runner.startPort=<%= node[:druid][:indexer][:runner][:startPort] %>
druid.indexer.runner.taskDir=/var/app/druid/storage/task/

druid.indexer.task.taskDir=/var/app/druid/storage/task/
druid.indexer.task.chathandler.type=announce

druid.indexer.fork.property.druid.indexer.hadoopWorkingPath=/var/app/druid/storage/task_hadoop
druid.indexer.fork.property.druid.computation.buffer.size=268435456
druid.indexer.fork.property.druid.processing.numThreads=<%= node[:druid][:indexer][:workers] %>

druid.worker.capacity=<%= node[:druid][:indexer][:workers] %>
druid.worker.ip=<%= node[:ipaddress] %>

# Indexing Service Discovery Module
druid.selectors.indexing.serviceName=<%= node[:druid][:indexing][:service] %>
